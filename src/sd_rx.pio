.program sd_rx

startbit:
    wait 0 gpio 18
    wait 1 gpio 18
    jmp pin startbit

    set y, 5
wordloop:
    set x, 31            ; Preload bit counter, delay until eye of first data bit
bitloop:                ; Loop 8 times
    wait 0 gpio 18
    wait 1 gpio 18
    in pins, 1          ; Sample data
    jmp x-- bitloop     ; Each iteration is 8 cycles
    //push
    jmp y-- wordloop     ; Each iteration is 8 cycles


% c-sdk {
#include "hardware/clocks.h"
#include "hardware/gpio.h"

static inline void sd_rx_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_sm_set_consecutive_pindirs(pio, sm, 16, 1, false);
    
    //pio_gpio_init(pio, pin);
    //gpio_pull_up(pin);

    pio_sm_config c = sd_rx_program_get_default_config(offset);
    sm_config_set_in_pins(&c, 16); // for WAIT, IN
    sm_config_set_jmp_pin(&c, 16);

    // Shift to right, autopush enabled
    sm_config_set_in_shift(&c, false, true, 32);
//    sm_config_set_in_shift(&c, true, false, 8);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);
    // SM transmits 1 bit per 8 execution cycles.
    //float div = (float)clock_get_hz(clk_sys) / 10*000*000;
    float div = (float)2;
    sm_config_set_clkdiv(&c, div);
    
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

static inline uint32_t sd_rx_program_getc(PIO pio, uint sm) {
    // 8-bit read from the uppermost byte of the FIFO, as data is left-justified
    io_rw_32 *rxfifo_shift = (io_rw_32*)&pio->rxf[sm];
    while (pio_sm_is_rx_fifo_empty(pio, sm))
        tight_loop_contents();
    return (uint32_t)*rxfifo_shift;
}

%}